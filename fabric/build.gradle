plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
}

loom {
    if(accessWidenerFile.exists()) {
        accessWidenerPath = accessWidenerFile
    }

    runs {
        client {
            client()
            vmArg '-XX:+AllowEnhancedClassRedefinition'
            ideConfigGenerated true
        }

        server {
            server()
            vmArg '-XX:+AllowEnhancedClassRedefinition'
            ideConfigGenerated true
        }
    }

    mods {
        "${MOD_ID}" {
            sourceSet project(':common').sourceSets.main
            sourceSet sourceSets.main
        }

        if(findProject('testmod-common') != null) {
            "${MOD_ID}_test_mod" {
                sourceSet project(':testmod-common').sourceSets.main
                sourceSet project(':testmod-fabric').sourceSets.main
            }
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${MINECRAFT_VERSION}"

    mappings(loom.layered {
        officialMojangMappings()

        if(rootProject.hasProperty('PARCHMENT_MAPPINGS')) {
            def mcVersion = rootProject.hasProperty('PARCHMENT_MINECRAFT_VERSION') ? "${PARCHMENT_MINECRAFT_VERSION}" : "${MINECRAFT_VERSION}"
            parchment("org.parchmentmc.data:parchment-${mcVersion}:${PARCHMENT_MAPPINGS}@zip")
        }
    })

    modImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER_VERSION}"
    modApi "net.fabricmc.fabric-api:fabric-api:${FABRIC_API_VERSION}+${MINECRAFT_VERSION}"

    compileOnly project(':common')
    implementation project(path: ':common', configuration: 'namedElements')

    if(findProject(':testmod-fabric') != null) {
        runtimeOnly project(path: ':testmod-fabric', configuration: 'namedElements')
    }
}

processResources {
    from project(':common').sourceSets.api.resources
    from project(':common').sourceSets.main.resources
}

compileJava {
    source project(':common').sourceSets.api.allSource
    source project(':common').sourceSets.main.allSource
}

sourcesJar {
    from project(':common').sourceSets.api.allJava
    from project(':common').sourceSets.main.allJava
}

task apiJar(type: Jar) {
    from project(':common').sourceSets.api.output
    classifier 'api'
}

task apiSourcesJar(type: Jar) {
    from project(':common').sourceSets.api.allJava
    classifier 'api-sources'
}

task remapApiJar(type: net.fabricmc.loom.task.RemapJarTask) {
    inputFile = apiJar.archiveFile
}

artifacts {
    archives apiJar
    archives apiSourcesJar
    archives remapApiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            loom.disableDeprecatedPomGeneration(it)

            artifact remapJar
            artifact sourcesJar
            artifact remapApiJar
            artifact apiSourcesJar
        }
    }
}
