plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
}

sourceSets {
    api {
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }

    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

loom {
    if(accessWidenerFile.exists()) {
        accessWidenerPath = accessWidenerFile
    }

    createRemapConfigurations(sourceSets.api)
}

repositories {
    maven { url 'https://repo.spongepowered.org/maven/' }
}

dependencies {
    minecraft "com.mojang:minecraft:${MINECRAFT_VERSION}"

    mappings(loom.layered {
        officialMojangMappings()

        if(rootProject.hasProperty('PARCHMENT_MAPPINGS')) {
            def mcVersion = rootProject.hasProperty('PARCHMENT_MINECRAFT_VERSION') ? "${PARCHMENT_MINECRAFT_VERSION}" : "${MINECRAFT_VERSION}"
            parchment("org.parchmentmc.data:parchment-${mcVersion}:${PARCHMENT_MAPPINGS}@zip")
        }
    })
}

processResources {
    from sourceSets.api.resources
}

compileJava {
    source sourceSets.api.allSource
}

sourcesJar {
    from sourceSets.api.allJava
}

remapJar.enabled = false
remapSourcesJar.enabled = false

jar {
    classifier ''
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    classifier 'api'
}

task apiSourcesJar(type: Jar) {
    from sourceSets.api.allJava
    classifier 'api-sources'
}

artifacts {
    archives apiJar
    archives apiSourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            loom.disableDeprecatedPomGeneration(it)

            artifact jar
            artifact sourcesJar
            artifact apiJar
            artifact apiSourcesJar
        }
    }
}
