plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

minecraft {
    if(rootProject.hasProperty('PARCHMENT_MAPPINGS')) {
        if(rootProject.hasProperty('PARCHMENT_MINECRAFT_VERSION')) {
            mappings channel: 'parchment', version: "${PARCHMENT_MINECRAFT_VERSION}-${PARCHMENT_MAPPINGS}-${MINECRAFT_VERSION}"
        } else {
            mappings channel: 'parchment', version: "${PARCHMENT_MAPPINGS}-${MINECRAFT_VERSION}"
        }
    } else {
        mappings channel: 'official', version: "${MINECRAFT_VERSION}"
    }

    if(accessTransformerFile.exists()) {
        accessTransformer = accessTransformerFile
    }

    runs {
        client {
            workingDirectory file('run/client')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--width', 1920, '--height', 1080
            jvmArg '-XX:+AllowEnhancedClassRedefinition'

            mods {
                "${MOD_ID}" {
                    source project(':common').sourceSets.main
                    source sourceSets.main
                }

                if(findProject(':testmod-common') != null) {
                    "${MOD_ID}_test_mod" {
                        source project(':testmod-common').sourceSets.main
                        source project(':testmod-forge').sourceSets.main
                    }
                }
            }
        }

        server {
            workingDirectory file('run/server')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            ideaModule "${rootProject.name}.${project.name}.main"
            args 'nogui'
            jvmArg '-XX:+AllowEnhancedClassRedefinition'

            mods {
                "${MOD_ID}" {
                    source project(':common').sourceSets.main
                    source sourceSets.main
                }

                if(findProject(':testmod-common') != null) {
                    "${MOD_ID}_test_mod" {
                        source project(':testmod-common').sourceSets.main
                        source project(':testmod-forge').sourceSets.main
                    }
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${MINECRAFT_VERSION}-${FORGE_VERSION}"

    compileOnly project(':common')

    if(findProject(':testmod-forge') != null) {
        runtimeOnly project(':testmod-forge')
    }
}

processResources {
    from project(':common').sourceSets.api.resources
    from project(':common').sourceSets.main.resources
}

compileJava {
    source project(':common').sourceSets.api.allSource
    source project(':common').sourceSets.main.allSource
}

sourcesJar {
    from project(':common').sourceSets.api.allJava
    from project(':common').sourceSets.main.allJava
}

jar {
    manifest {
        attributes([
                'FMLModType': 'GAMELIBRARY'
        ])
    }
}

task apiJar(type: Jar) {
    from project(':common').sourceSets.api.output
    classifier 'api'
}

task apiSourcesJar(type: Jar) {
    from project(':common').sourceSets.api.allJava
    classifier 'api-sources'
}

reobf {
    apiJar { }
}

jar.finalizedBy('reobfJar')
apiJar.finalizedBy('reobfApiJar')

artifacts {
    archives apiJar
    archives apiSourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact apiJar
            artifact apiSourcesJar
        }
    }
}
